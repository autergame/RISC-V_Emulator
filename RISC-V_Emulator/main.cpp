#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

//=============================================//

int32_t sign_extend(uint32_t value, uint32_t bits)
{
	return ((int32_t)value << (32 - bits)) >> (32 - bits);
}

//=============================================//

int32_t i_imm(uint32_t inst)
{
	// 1111_1111_1111_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_1111_1111_1111
	uint32_t i_imm1 = (inst & 0b11111111111100000000000000000000) >> 20;

	// 1 111_1111_1111_1111_1111 1111_1111_1111
	int32_t i_imm2 = sign_extend(i_imm1, 12); 

	return i_imm2;
}


uint32_t i_imm_enc(int32_t value)
{
	// 0000_0000_0000_0000_0000_1111_1111_1111 -> 1111_1111_1111_0000_0000_0000_0000_0000
	uint32_t i_imm1 = (value & 0b00000000000000000000111111111111) << 20;

	return i_imm1;
}

//=============================================//

int32_t s_imm(uint32_t inst)
{
	// 1111_1110_0000_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_1111_1110_0000
	uint32_t s_imm1 = (inst & 0b11111110000000000000000000000000) >> 20;

	// 0000_0000_0000_0000_0000_1111_1000_0000 -> 0000_0000_0000_0000_0000_0000_0001_1111
	uint32_t s_imm2 = (inst & 0b00000000000000000000111110000000) >> 7;

	// 0000_0000_0000_0000_0000_1111_1111_1111
	uint32_t s_imm3 = s_imm1 | s_imm2; 

	// 1 111_1111_1111_1111_1111 1111_1111_1111
	int32_t s_imm4 = sign_extend(s_imm3, 12); 

	return s_imm4;
}

uint32_t s_imm_enc(int32_t value)
{
	// 0000_0000_0000_0000_0000_1111_1110_0000 -> 1111_1110_0000_0000_0000_0000_0000_0000
	uint32_t s_imm1 = (value & 0b00000000000000000000111111100000) << 20;

	// 0000_0000_0000_0000_0000_0000_0001_1111 -> 0000_0000_0000_0000_0000_1111_1000_0000
	uint32_t s_imm2 = (value & 0b00000000000000000000000000011111) << 7;

	// 1111_1110_0000_0000_0000_1111_1000_0000
	uint32_t s_imm3 = s_imm1 | s_imm2; 

	return s_imm3;
}

//=============================================//

int32_t b_imm(uint32_t inst)
{
	// 1000_0000_0000_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0001_0000_0000_0000
	uint32_t b_imm1 = (inst & 0b10000000000000000000000000000000) >> 19;

	// 0111_1110_0000_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_0111_1110_0000
	uint32_t b_imm2 = (inst & 0b01111110000000000000000000000000) >> 20;

	// 0000_0000_0000_0000_0000_1111_0000_0000 -> 0000_0000_0000_0000_0000_0000_0001_1110
	uint32_t b_imm3 = (inst & 0b00000000000000000000111100000000) >> 7;

	// 0000_0000_0000_0000_0000_0000_1000_0000 -> 0000_0000_0000_0000_0000_1000_0000_0000
	uint32_t b_imm4 = (inst & 0b00000000000000000000000010000000) << 4;

	// 0000_0000_0000_0000_0001_1111_1111_1110
	uint32_t b_imm5 = b_imm1 | b_imm2 | b_imm3 | b_imm4; 

	// 1 111_1111_1111_1111_111 1_1111_1111_111 0
	int32_t b_imm6 = sign_extend(b_imm5, 13); 

	return b_imm6;
}

uint32_t b_imm_enc(int32_t value)
{
	// 0000_0000_0000_0000_0001_0000_0000_0000 -> 1000_0000_0000_0000_0000_0000_0000_0000
	uint32_t b_imm1 = (value & 0b00000000000000000001000000000000) << 19;

	// 0000_0000_0000_0000_0000_0111_1110_0000 -> 0111_1110_0000_0000_0000_0000_0000_0000
	uint32_t b_imm2 = (value & 0b00000000000000000000011111100000) << 20;

	// 0000_0000_0000_0000_0000_0000_0001_1110 -> 0000_0000_0000_0000_0000_1111_0000_0000
	uint32_t b_imm3 = (value & 0b00000000000000000000000000011110) << 7;

	// 0000_0000_0000_0000_0000_1000_0000_0000 -> 0000_0000_0000_0000_0000_0000_1000_0000
	uint32_t b_imm4 = (value & 0b00000000000000000000100000000000) >> 4;

	// 1111_1110_0000_0000_0000_1111_1000_0000
	uint32_t b_imm5 = b_imm1 | b_imm2 | b_imm3 | b_imm4;

	return b_imm5;
}

//=============================================//

uint32_t u_imm(uint32_t inst)
{
	// 1111_1111_1111_1111_1111_0000_0000_0000 -> 0000_0000_0000_1111_1111_1111_1111_1111
	uint32_t u_imm1 = (inst & 0b11111111111111111111000000000000) >> 12;

	return u_imm1;
}

uint32_t u_imm_enc(uint32_t value)
{
	// 0000_0000_0000_1111_1111_1111_1111_1111 -> 1111_1111_1111_1111_1111_0000_0000_0000
	uint32_t u_imm1 = (value & 0b00000000000011111111111111111111) << 12;

	return u_imm1;
}

//=============================================//

int32_t j_imm(uint32_t inst)
{
	// 1000_0000_0000_0000_0000_0000_0000_0000 -> 0000_0000_0001_0000_0000_0000_0000_0000
	uint32_t j_imm1 = (inst & 0b10000000000000000000000000000000) >> 11;

	// 0111_1111_1110_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_0111_1111_1110
	uint32_t j_imm2 = (inst & 0b01111111111000000000000000000000) >> 20;

	// 0000_0000_0001_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_1000_0000_0000
	uint32_t j_imm3 = (inst & 0b00000000000100000000000000000000) >> 9;

	// 0000_0000_0000_1111_1111_0000_0000_0000
	uint32_t j_imm4 = (inst & 0b00000000000011111111000000000000);

	// 0000_0000_0001_1111_1111_1111_1111_1110
	uint32_t j_imm5 = j_imm1 | j_imm2 | j_imm3 | j_imm4;

	// 1 111_1111_111 1_1111_1111_1111_1111_111 0
	int32_t j_imm6 = sign_extend(j_imm5, 21); 

	return j_imm6;
}

uint32_t j_imm_enc(int32_t value)
{
	// 0000_0000_0001_0000_0000_0000_0000_0000 -> 1000_0000_0000_0000_0000_0000_0000_0000
	uint32_t j_imm1 = (value & 0b00000000000100000000000000000000) << 11;

	// 0000_0000_0000_0000_0000_0111_1111_1110 -> 0111_1111_1110_0000_0000_0000_0000_0000
	uint32_t j_imm2 = (value & 0b00000000000000000000011111111110) << 20;

	// 0000_0000_0000_0000_0000_1000_0000_0000 -> 0000_0000_0001_0000_0000_0000_0000_0000
	uint32_t j_imm3 = (value & 0b00000000000000000000100000000000) << 9;

	// 0000_0000_0000_1111_1111_0000_0000_0000
	uint32_t j_imm4 = (value & 0b00000000000011111111000000000000);

	// 1111_1111_1111_1111_1111_0000_0000_0000
	uint32_t j_imm5 = j_imm1 | j_imm2 | j_imm3 | j_imm4; 

	return j_imm5;
}

//=============================================//

void test_imm_s(const char* name, uint32_t inst, int32_t start, int32_t end,
	uint32_t(*x_imm_enc)(int32_t), int32_t(*x_imm)(uint32_t), int32_t inc)
{
	for (int32_t x = start; x <= end; x += inc)
	{
		uint32_t inst_x_enc = x_imm_enc(x);

		uint32_t inst_x = inst_x_enc | inst;

		int32_t inst_x_dec = x_imm(inst_x);

		if (x != inst_x_dec)
		{
			printf("%s error: %" PRId32 " %" PRId32 "\n", name, x, inst_x_dec);
			break;
		}
	}
}

void test_imm_u(const char* name, uint32_t inst, uint32_t start, uint32_t end,
	uint32_t(*x_imm_enc)(uint32_t), uint32_t(*x_imm)(uint32_t), int32_t inc)
{
	for (uint32_t x = start; x <= end; x += inc)
	{
		uint32_t inst_x_enc = x_imm_enc(x);

		uint32_t inst_x = inst_x_enc | inst;

		uint32_t inst_x_dec = x_imm(inst_x);

		if (x != inst_x_dec)
		{
			printf("%s error: %" PRId32 " %" PRId32 "\n", name, x, inst_x_dec);
			break;
		}
	}
}

//=============================================//

int main(int argc, char* *argv)
{
	uint32_t inst_i  = 0b00000000000011111111111111111111; // 000000000000_11111_111_11111_1111111
	uint32_t inst_sb = 0b00000001111111111111000001111111; // 0000000_11111_11111_111_00000_1111111
	uint32_t inst_uj = 0b00000000000000000000111111111111; // 00000000000000000000_11111_1111111

	test_imm_s("I", inst_i,     -2048,       2047, i_imm_enc, i_imm, 1);
	test_imm_s("S", inst_sb,    -2048,       2047, s_imm_enc, s_imm, 1);
	test_imm_s("B", inst_sb,    -4096,       4095, b_imm_enc, b_imm, 2);
	test_imm_s("J", inst_uj, -1048576,    1048575, j_imm_enc, j_imm, 2);
	test_imm_u("U", inst_uj,        0, 0x000fffff, u_imm_enc, u_imm, 1);

	return 0;
}